col=c("lightgrey","darkgrey"),cex.axis=0.8, cex.lab=0.8, cex.names=0.5, add=TRUE, las=1)
install.packages("prepplot")
library("prepplot")
bp <- barplot(sort(area2), horiz=TRUE, yaxt="n", xlab="rent",
col=c("lightgrey","darkgrey"), cex.axis=0.8, cex.lab=0.8, cex.names=0.5, plot=FALSE)
## bp ist ein Vektor mit den Balkenpositionen
prepplot::prepplot(xlim=c(0,100), ylim=range(bp), xlab="rent",
yaxt = "n", cex=0.8)
bp <- barplot(sort(area2), horiz=TRUE, axes=FALSE, xlab="rent",
col=c("lightgrey","darkgrey"),cex.axis=0.8, cex.lab=0.8, cex.names=0.5, add=TRUE, las=1)
bp <- barplot(sort(area2), horiz=TRUE, yaxt="n", xlab="rent",
col=c("lightgrey","darkgrey"), cex.axis=0.8, cex.lab=0.8, cex.names=0.5, plot=FALSE)
## bp ist ein Vektor mit den Balkenpositionen
prepplot::prepplot(xlim=c(0,800), ylim=range(bp), xlab="rent",
yaxt = "n", cex=0.8)
bp <- barplot(sort(area2), horiz=TRUE, axes=FALSE, xlab="rent",
col=c("lightgrey","darkgrey"),cex.axis=0.8, cex.lab=0.8, cex.names=0.5, add=TRUE, las=1)
data(CPS1985)
#setwd("C:/Users/David/Documents/Uni/Mdss_2/UB_1")
miete <- read.table("https://data.ub.uni-muenchen.de/2/1/miete03.asc", header = TRUE)
kredit <- read.table("https://data.ub.uni-muenchen.de/23/2/kredit.asc", header = TRUE)
?str
?str(kredit)
str(kredit)
kredit
?attach
attach(kredit)
attach(kredit)
hoehe
hoehe
# c) qualitatives und stetiges Merkaml
spineplot(CPS1985$wage,CPS1985$ethnicity,main="qualitatives und stetiges Merkmal",xlab="ethnicity",ylab="wage")
# c) qualitatives und stetiges Merkaml
spineplot(CPS1985$wage,CPS1985$ethnicity,main="qualitatives und stetiges Merkmal",xlab="wage",ylab="ethnicity")
CPS1985
### cluster diagnostics
library(cluster)
dd <- dist(iris[,1:4])  ## 150x150
## man hÃ¤tte auch Funktion cor_cophenetic nehmen kÃ¶nnen
cor(dd, cophenetic(hclust(dd, method="complete")))
cor(dd, cophenetic(hclust(dd, method="ward")))
cor(dd, cophenetic(hclust(dd, method="mcquitty")))
cor(dd, cophenetic(hclust(dd, method="average")))
cor(dd, cophenetic(hclust(dd, method="single")))
cor(dd, cophenetic(hclust(dd, method="complete")), method = "spearman")
cor(dd, cophenetic(hclust(dd, method="ward")), method = "spearman")
cor(dd, cophenetic(hclust(dd, method="mcquitty")), method = "spearman")
cor(dd, cophenetic(hclust(dd, method="average")), method = "spearman")
cor(dd, cophenetic(hclust(dd, method="single")), method = "spearman")
## average linkage
hierarchical <- hclust(dd, method="average")
plot(hierarchical)  ## 4 Cluster?
## Liste mit Cluster-Einteilungen bei Schnitt
## in 1, 2, 3, ..., 10 cluster
irisclus3 <- cutree(hierarchical, 3)
## Silhouetten-Plot der Iris-Daten
plot(silhouette(irisclus3, dd))
library(mlbench)
library(cluster)
data(BreastCancer)
data(swiss)
str(BreastCancer)
str(swiss)
dd1 <- dist(swiss)
hierarchical <- hclust(dd1, method="average")
swissagnes <- agnes(dd1)
bannerplot(swissagnes)
pltree(swissagnes)
dendextend::cor_cophenetic(hierarchical, dd1)
dendextend::cor_cophenetic(hierarchical, swissagnes)
plot(silhouette(cutree(hierarchical, 3), dd1))
cluslist <- lapply(1:10,
function(obj)
cutree(hierarchical, obj))
funclus <- function(x, k){
clus <- list(cluster=cluslist[[k]])
}
gap <- clusGap(swiss, funclus, K.max=10)
plot(gap)
print(gap)
Cancer_data <- (BreastCancer[,2:(length(BreastCancer)-1)])
dd2 <- daisy(Cancer_data)
trueclus <- as.numeric(BreastCancer$Class)
cancer_hierarchical <- hclust(dd2, method="average")
canceragnes <- agnes(dd2)
table(cutree(cancer_hierarchical, 2), trueclus)
install.packages("psych")
dat <- dat[,-1]
dat <- read.table("UScrime.dat") ### funktioniert nicht, weil einige Staaten Leerzeichen im Namen haben
datlines <- readLines("UScrime.dat")
namen <- unlist(strsplit(datlines[1]," "))
namen
head(datlines)
nchar(datlines[2])
readfun <- function(line){
## Zeilen einlesen
State <- trimws(substr(line, 1, 18))
other <- read.table(text=substr(line, 19, 59))
colnames(other) <- namen[-1]
cbind(State=State, other)
}
dat <- do.call(rbind, lapply(datlines[-1], readfun))
rownames(dat) <- dat$State
dat <- dat[,-1]
?lm
str(kredit)
kredit$beruf
?scatterplot
#install.packages("ggmosaic")
library("AER")
?scatterplot
attach(kredit)
# a)
scatterplot(hoehe,laufzeit)
lm1 <- lm(hoehe ~ laufzeit)
lm2 <- lm(hoehe ~ laufzeit + alter)
lm3 <- lm(hoehe ~ laufzeit + alter + beruf)
plot(hoehe,laufzeit)
grid on
plot(hoehe,laufzeit,grid=tRUE)
plot(hoehe,laufzeit)
abline(lm1)
lines(hoehe,predict(lm1))
plot(hoehe,laufzeit)
lines(hoehe,predict(lm1))
lines(predict(lm1))
lines((lm1))
scatterplot(hoehe,laufzeit)
abline((lm1))
plot(hoehe,laufzeit)
abline((lm1))
abline(lm1)
install.packages("car")
install.packages("Rtools ")
install.packages("Rtools")
install.packages("car")
install.rtools()
install.packages("car")
library("AER")
library(mlbench)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("car")
Sys.which("make")
devtools::find_rtools()
ys.which("ls.exe")
Sys.which("ls.exe")
Sys.which("gcc.exe")
Sys.which("ls.exe")
Sys.which("gcc.exe")
install.packages("car")
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
source('~/Uni/Explorative Datenanalyse/1. Projekt/Projektarrhythmia.R')
install.packages("car")
install.packages(c("backports", "class", "ellipsis", "glue", "haven", "KernSmooth", "maptools", "MASS", "mnormt", "nlme", "nnet", "openxlsx", "ps", "rlang", "scales", "sp", "spatial", "tidyr", "tidyselect", "vctrs", "zoo"))
Sys.getenv()['PATH']
install.packages("car")
install.packages("car")
Sys.which("ls.exe")
Sys.which("gcc.exe")
install.packages("jsonlite", type = "source")
Sys.which("make")
install.packages("jsonlite", type = "source
")
find_rtools()
find_rtools()
Sys.which("make")
library("car")
install.packages("car")
##  Daten einlesen ##
setwd("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt")
rawdata <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/arrhythmia/arrhythmia.data", header = FALSE, na.strings = "?" )
arrhythmia <- read.csv("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt/arrhythmia_cat_1.csv",header = TRUE)
# Verteilung der Herzrythmusstörungsklassen 1 == "keine Störung"
# extrahiere Ergebnisspalte als vorbereitung zur Hauptkomponentenanalyse
trueclus <- as.numeric(arrhythmia$class)
table(trueclus)
arrhythmia$class <- NULL
trueclus
setwd("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt")
rawdata <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/arrhythmia/arrhythmia.data", header = FALSE, na.strings = "?" )
arrhythmia <- read.csv("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt/arrhythmia_cat_1.csv",header = TRUE)
# Verteilung der Herzrythmusstörungsklassen 1 == "keine Störung"
# extrahiere Ergebnisspalte als vorbereitung zur Hauptkomponentenanalyse
trueclus <- as.numeric(arrhythmia$class)
table(trueclus)
arrhythmia
dim(arrhythmia)
arrhythmia$class <- NULL
# berechne Distanzmatrix dd
dd <- daisy(arrhythmia,metric="gower")
hier.ave <- hclust(dd, method="ward")
arrhythmiaagnes <- agnes(dd)
bannerplot(arrhythmiaagnes)
pltree(arrhythmiaagnes)
dendextend::cor_cophenetic(arrhythmiaagnes,dd)
plot(hier.ave)
cluslist <- lapply(1:10,
function(obj)
cutree(hier.ave, obj))
funclus <- function(x, k){
clus <- list(cluster=cluslist[[k]])
}
#gap <- clusGap(arrhythmia, funclus, K.max=5)
plot(gap)
print(gap)
# keine sinnvolle Clusterung
table(cluslist[[4]], trueclus)
##  Hierachical Clusteranalyse mit normalisierung und ohne Merkmalsreduktion  ##
# berechne Distanzmatrix dd
dd <- dist(scaled.arrhythmia)
hier.ave <- hclust(dd, method="average")
arrhythmiaagnes <- agnes(dd)
bannerplot(arrhythmiaagnes)
pltree(arrhythmiaagnes)
dendextend::cor_cophenetic(arrhythmiaagnes, dd)
cluslist <- lapply(1:3,
function(obj)
cutree(hier.ave, obj))
funclus <- function(x, k){
clus <- list(cluster=cluslist[[k]])
}
gap <- clusGap(scaled.arrhythmia, funclus, K.max=3)
plot(gap)
# keine sinnvolle Clusterung
table(cluslist[[3]], trueclus)
##  kmean Clusteranalyse mit normalisierung und ohne Merkmalsreduktion  ##
'
k-means assume the variance of the distribution of each attribute (variable) is spherical;
all variables have the same variance;
the prior probability for all k clusters are the same, i.e. each cluster has roughly equal number of observations;
If any one of these 3 assumptions is violated, then k-means will fail.'
kmliste <- lapply(2:16, function(obj)
kmeans(arrhythmia, obj, nstart=25))
str(kmliste[[2]])
names(kmliste) <- 2:10
## Scree plot nach Backhaus et al.
plot(2:16, sapply(kmliste,
function(obj) obj$tot.withinss), type="b")
## kmeans gegen tatsaechliche Klassifizierung ##
table(kmliste[[2]]$cluster, trueclus)
table(kmliste[[15]]$cluster, trueclus)
##  Dimensionsreduktion mit PCA ##
PCarrhythmia <- prcomp(arrhythmia, scale.=TRUE)
EVarrhythmia <- eigen(cor(arrhythmia))
plot(PCarrhythmia)
VSS.scree(arrhythmia)
plot(PCarrhythmia)
biplot(PCarrhythmia, cex=0.6, xpd=NA)
HKWerte <- predict(PCarrhythmia)
cor(arrhythmia, HKWerte[,1:2]) ## Ladungen (Begriff loadings wird uneinheitlich genutzt)
rowSums(cor(arrhythmia, HKWerte[,1:2])^2) ## Kommunalitäten der ersten beiden HKen
pca_50 <- principal(arrhythmia,34,rotate="varimax") ## 6 factors, Kommunalit?ten 1
heatmap((pca_50$loadings))
screeplot(PCarrhythmia, type = "l", npcs = 100)
cumprob <- cumsum(PCarrhythmia$sdev^2 / sum(PCarrhythmia$sdev^2))
plot(cumprob[0:100], xlab = "HK #", ylab = "Erklaerte Varianz",
main = "kumulierte Varianz")
principal(arrhythmia,79,rotate="varimax") ## 4 factors, höhere Kommunalitäten
HKWerte <- predict(PCarrhythmia)
HKWerte <- PCarrhythmia$x
require("psych")
require("AER")
require("mlbench")
require("cluster")
require("zoo")
# install.packages("missForest") für gemischt Datensätze
##  Daten einlesen ##
setwd("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt")
rawdata <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/arrhythmia/arrhythmia.data", header = FALSE, na.strings = "?" )
arrhythmia <- read.csv("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt/arrhythmia_cat_1.csv",header = TRUE)
# Verteilung der Herzrythmusstörungsklassen 1 == "keine Störung"
# extrahiere Ergebnisspalte als vorbereitung zur Hauptkomponentenanalyse
trueclus <- as.numeric(arrhythmia$class)
table(trueclus)
arrhythmia$class <- NULL
##  Hierachical Clusteranalyse ohne normalisierung und ohne Merkmalsreduktion  ##
# berechne Distanzmatrix dd
dd <- daisy(arrhythmia,metric="gower")
hier.ave <- hclust(dd, method="ward")
arrhythmiaagnes <- agnes(dd)
bannerplot(arrhythmiaagnes)
pltree(arrhythmiaagnes)
dendextend::cor_cophenetic(arrhythmiaagnes,dd)
plot(hier.ave)
cluslist <- lapply(1:10,
function(obj)
cutree(hier.ave, obj))
funclus <- function(x, k){
clus <- list(cluster=cluslist[[k]])
}
#gap <- clusGap(arrhythmia, funclus, K.max=5)
plot(gap)
print(gap)
# keine sinnvolle Clusterung
table(cluslist[[4]], trueclus)
##  Hierachical Clusteranalyse mit normalisierung und ohne Merkmalsreduktion  ##
# berechne Distanzmatrix dd
dd <- dist(scaled.arrhythmia)
hier.ave <- hclust(dd, method="average")
arrhythmiaagnes <- agnes(dd)
bannerplot(arrhythmiaagnes)
pltree(arrhythmiaagnes)
dendextend::cor_cophenetic(arrhythmiaagnes, dd)
cluslist <- lapply(1:3,
function(obj)
cutree(hier.ave, obj))
funclus <- function(x, k){
clus <- list(cluster=cluslist[[k]])
}
gap <- clusGap(scaled.arrhythmia, funclus, K.max=3)
plot(gap)
# keine sinnvolle Clusterung
table(cluslist[[3]], trueclus)
##  kmean Clusteranalyse mit normalisierung und ohne Merkmalsreduktion  ##
'
k-means assume the variance of the distribution of each attribute (variable) is spherical;
all variables have the same variance;
the prior probability for all k clusters are the same, i.e. each cluster has roughly equal number of observations;
If any one of these 3 assumptions is violated, then k-means will fail.'
kmliste <- lapply(2:16, function(obj)
kmeans(arrhythmia, obj, nstart=25))
str(kmliste[[2]])
names(kmliste) <- 2:10
## Scree plot nach Backhaus et al.
plot(2:16, sapply(kmliste,
function(obj) obj$tot.withinss), type="b")
## kmeans gegen tatsaechliche Klassifizierung ##
table(kmliste[[2]]$cluster, trueclus)
table(kmliste[[15]]$cluster, trueclus)
##  Dimensionsreduktion mit PCA ##
PCarrhythmia <- prcomp(arrhythmia, scale.=TRUE)
EVarrhythmia <- eigen(cor(arrhythmia))
plot(PCarrhythmia)
VSS.scree(arrhythmia)
plot(PCarrhythmia)
biplot(PCarrhythmia, cex=0.6, xpd=NA)
HKWerte <- predict(PCarrhythmia)
cor(arrhythmia, HKWerte[,1:2]) ## Ladungen (Begriff loadings wird uneinheitlich genutzt)
rowSums(cor(arrhythmia, HKWerte[,1:2])^2) ## Kommunalitäten der ersten beiden HKen
pca_50 <- principal(arrhythmia,34,rotate="varimax") ## 6 factors, Kommunalit?ten 1
heatmap((pca_50$loadings))
screeplot(PCarrhythmia, type = "l", npcs = 100)
cumprob <- cumsum(PCarrhythmia$sdev^2 / sum(PCarrhythmia$sdev^2))
plot(cumprob[0:100], xlab = "HK #", ylab = "Erklaerte Varianz",
main = "kumulierte Varianz")
principal(arrhythmia,79,rotate="varimax") ## 4 factors, höhere Kommunalitäten
HKWerte <- predict(PCarrhythmia)
HKWerte <- PCarrhythmia$x
# keine sinnvolle Clusterung
table(cluslist[[4]], trueclus)
# keine sinnvolle Clusterung
table(cluslist[[3]], trueclus)
# berechne Distanzmatrix dd
dd <- daisy(arrhythmia,metric="average")
hier.ave <- hclust(dd, method="ward")
hier.ave <- hclust(dd, method="ward.D2")
arrhythmiaagnes <- agnes(dd)
bannerplot(arrhythmiaagnes)
pltree(arrhythmiaagnes)
dendextend::cor_cophenetic(arrhythmiaagnes,dd)
plot(hier.ave)
cluslist <- lapply(1:10,
function(obj)
cutree(hier.ave, obj))
funclus <- function(x, k){
clus <- list(cluster=cluslist[[k]])
}
#gap <- clusGap(arrhythmia, funclus, K.max=5)
plot(gap)
print(gap)
# keine sinnvolle Clusterung
table(cluslist[[4]], trueclus)
# keine sinnvolle Clusterung
table(cluslist[[9]], trueclus)
require("psych")
require("AER")
require("mlbench")
require("cluster")
require("zoo")
require("dendextend")
require("factoextra")
# install.packages("missForest") f?r gemischt Datens?tze
##  Daten einlesen ##
setwd("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt/Daten")
rawdata <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/arrhythmia/arrhythmia.data", header = FALSE, na.strings = "?" )
arrhythmia <- read.csv("scaled.arrhythmia.csv",header = TRUE)
unscaled.arrhythmia <- read.csv("unscaled.arrhythmia.csv",header = TRUE)
# Verteilung der Herzrythmusst?rungsklassen 1 == "keine St?rung"
# extrahiere Ergebnisspalte als vorbereitung zur Hauptkomponentenanalyse
trueclus <- as.numeric(arrhythmia$class)
table(trueclus)
arrhythmia$class <- NULL
raw.trueclus <- as.numeric(rawdata$V280)
rawdata$V280 <- NULL
unscaled.arrhythmia$class <- NULL
arrhythmia.sick <- arrhythmia[(trueclus>1)]
sick.trueclus <- trueclus[(trueclus>1)]
arrhythmia.sick <- arrhythmia[(trueclus>1),]
dim(arrhythmia.sick)
principal(arrhythmia,50,rotate="none") ## 4 factors, h?here Kommunalit?ten
norot13 <- principal(arrhythmia, nfactors=27,rotate="none")
par(mar=c(4,6,4,4))
plot(norot13$loadings, las=1,cex.axis=0.7,text.cell=list(cex=0.6),main="Ladungen ohne Rotation")
library(plot.matrix)
nstall.packages("plot.matrix")
install.packages("plot.matrix")
library(plot.matrix)
norot13 <- principal(arrhythmia, nfactors=27,rotate="none")
par(mar=c(4,6,4,4))
plot(norot13$loadings, las=1,cex.axis=0.7,text.cell=list(cex=0.6),main="Ladungen ohne Rotation")
norot13 <- principal(arrhythmia, nfactors=9,rotate="none")
par(mar=c(4,6,4,4))
plot(norot13$loadings, las=1,cex.axis=0.7,text.cell=list(cex=0.6),main="Ladungen ohne Rotation")
norot13 <- principal(arrhythmia, nfactors=9,rotate="varimax")
par(mar=c(4,6,4,4))
plot(norot13$loadings, las=1,cex.axis=0.7,text.cell=list(cex=0.6),main="Ladungen ohne Rotation")
install.packages("visdat")
install.packages("visdat")
install.packages("visdat")
visdat::vis_dat(rawdata)
require("psych")
require("AER")
require("mlbench")
require("cluster")
require("zoo")
require("plyr")
require("factoextra")
require("matrixStats") ## for rowSums, rowMeans....
##  Daten einlesen ##
##setwd("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt")
arrhythmia <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/arrhythmia/arrhythmia.data", header = FALSE, na.strings = "?" )
rawdata <- arrhythmia
arrhythmia <- rawdata ## dim(arrhythmia) [1] 452 280
farben <- c("#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3","#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#B0E2FF","#EE799F","#CCEBC5")
## ergaenze relevante Spaltennamen
names(arrhythmia)[c(1:15,280)]  <- c("Age","Sex","Height","Weight","QRS_duration","P_R_interval",
"Q_T_interval","T_interval","P_interval","QRS","T","P","QRST","J","Heartrate","class")
## allgemeine Strukturanalyse ##
describe(arrhythmia)
## Untersuchung Klassifizierung ##
trueclus <- as.numeric(arrhythmia$class)
table(trueclus)
## uebersetze kategorische Klassifizierungsspalte in Binaere (Krank/nicht krank) Spalte
temp <- as.numeric(arrhythmia$class)
isSick <- c()
for(i in 1:length(temp)){
if(temp[i] > 1){
isSick[i] <- 1
}
else{
isSick[i] <- 0
}
}
bmi <- arrhythmia$Weight/(arrhythmia$Height/100)^2
boxplot(arrhythmia$Age~isSick, names=c("Nein","Ja"), col=farben[c(1,4)],
main="Krankheitsfaelle gegen Alter",
xlab="Herzrythmusstoerung erkannt", ylab="Alter")
boxplot(bmi~isSick, names=c("Nein","Ja"), col=farben[1:2],
main="Krankheitsfaelle gegen BMI(Gewicht/Hoehe^2",
xlab="Herzrythmusstoerung erkannt", ylab="BMI")
barplot(table(arrhythmia$Sex,isSick),
col=farben[1:2] ,main="Krankheitsfaelle gegen Geschlecht",names=c("Nein","Ja"),
xlab="Herzrythmusstoerung erkannt", ylab="Haeufigkeit"); legend("topright",
title="Geschlecht", c("Maenner","Frauen"),cex=0.8, fill = farben[1:2])
##  Datenbereinigung  ##
## Missing Value Analyse
table(is.na(arrhythmia))
table(complete.cases(arrhythmia))
count.na <- function(x){sum(is.na(x))}
visdat::vis_dat(arrhythmia)
plot(norot13$loadings, las=1,cex.axis=0.7,text.cell=list(cex=0.6),main="Ladungen mit Rotation")
pca_50 <- principal(arrhythmia,34,rotate="varimax") ## 6 factors, Kommunalit?ten 1
pca_50
require("psych")
require("AER")
require("mlbench")
require("cluster")
require("zoo")
require("dendextend")
require("factoextra")
library(plot.matrix)
# install.packages("visdat") f?r gemischt Datens?tze
##  Daten einlesen ##
setwd("C:/Users/David/Documents/Uni/Explorative Datenanalyse/1. Projekt/Daten")
rawdata <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/arrhythmia/arrhythmia.data", header = FALSE, na.strings = "?" )
arrhythmia <- read.csv("scaled.arrhythmia.csv",header = TRUE)
unscaled.arrhythmia <- read.csv("unscaled.arrhythmia.csv",header = TRUE)
# Verteilung der Herzrythmusst?rungsklassen 1 == "keine St?rung"
# extrahiere Ergebnisspalte als vorbereitung zur Hauptkomponentenanalyse
trueclus <- as.numeric(arrhythmia$class)
table(trueclus)
arrhythmia$class <- NULL
raw.trueclus <- as.numeric(rawdata$V280)
rawdata$V280 <- NULL
unscaled.arrhythmia$class <- NULL
arrhythmia.sick <- arrhythmia[(trueclus>1),]
sick.trueclus <- trueclus[(trueclus>1)]
##  Hierachical Clusteranalyse ohne normalisierung und ohne Merkmalsred
unrot <- principal(arrhythmia,29,rotate="none")
unrot
